DADX     IDNT     2,2      Calculate the product of double precision real "x": x * (2 ** n)
         TTL      Calculate the product of double precision real "x": x * (2 ** n)
* NOTICE OF COPYRIGHT AND OWNERSHIP OF SOFTWARE:
*
*  Copyright (C) 1985, 1986, 1987, 1988, 1989, 1990 Oregon Software, Inc.
*  All Rights Reserved.
*
*  This program is the property of Oregon Software.  The program or
*  parts of it may be copied and used only as provided under a signed
*  license agreement with Oregon Software.  Any support purchased from
*  Oregon Software does not apply to user-modified programs.  All copies
*  of this program must display this notice and all copyright notices.
*
*
*  Release version: 0045  Level: 1
*  Processor: MC68000
*  System: VERSADOS
*  Subsystem: STANDARD
*
* Calculate the product of double precision real "x": x * (2 ** n)
*
* Last modified by KRIS on 26-Nov-1990 14:01:25
* Purpose:
         IFEQ     1
Update release version for PL-GS0-GS0 at 2.3.0.1
         ENDC
*
*  p_dadx returns the product of a double precision real value, "x",
*  and 2.0 raised to an integer power, "n".  { p_dadx := x * (2 ** n) }
*
*  "y := p_dadx(x, 1)" is comparable to (and faster than) "y := x * 2.0"
*
*  With the exception of possible rounding errors during denormalization,
*  "p_dadx" is equivalent to the following Pascal function (which may be
*  used to validate it):
*
*-------------------------------------------------------------------
*
*  FUNCTION {$double} testdadx (x: real; n: integer): real;
*    var  i: integer; t: ;
*    begin
*      t := x;
*      if n < 0 then
*        for i := n to -1 do t := t / 2.0
*      else { n >= 0 }
*        for i := +1 to n do t := t * 2.0;
*      testdadx := t
*    end { testdadx };
*
*-------------------------------------------------------------------
*
* stack after entry:
*
*	<p_dadx result>	fp+20
*	<value of x>	fp+12
*	<value of n>	fp+8
*	<return addr>	fp+4
*	<dynamic link>	fp
*	<register save area>
*
*-------------------------------------------------------------------
R        EQU      20
X        EQU      12
N        EQU      8

         SECTION  8
         XDEF     P_DADX
         XREF     P_DTOX
         XREF     P_XTOD
         XREF     P_FPPERR

P_DADX   LINK     A6,#-24
         MOVEM.L  D0-D5,(SP)        * save registers d0-d5
         MOVEM.L  N(A6),D0-D2       * integer -> d0, double -> d1/d2
         MOVE.L   #$7FF,D3          * load constant for limit testing
         MOVE.L   D3,D4             * (and also as an exponent mask)

         SWAP     D1
         ROR.W    #4,D1             * right align exponent
         AND.W    D1,D4             * transfers exponent only
         BEQ.S    TSTZRO            * if zero or denormal

         CMP.W    D3,D4             * reserved exponent?
         BEQ.S    FIXUP             * yes -- no change

         EOR.W    D4,D1             * clear old exponent
         ADD.L    D4,D0             * add biased exponent to unbiased integer
         BLE.S    UNFLOW            * if exponent underflow

         CMP.L    D3,D0             * exponent overflow?
         BGE.S    OVFLOW            * yes -- return infinity

ADDEXP   OR.W     D0,D1             * set new exponent

UNFLOW
* *** HUH ***
FIXUP    ROL.W    #4,D1             * reconstruct packed value
         SWAP     D1

EXIT     MOVEM.L  D1-D2,R(A6)       * store d1/d2 as result
         MOVEM.L  (SP),D0-D5        * restore registers d0-d5
         UNLK     A6
         RTS

*-------------------------------|

OVFLOW   OR.W     D3,D1             * set to max exponent
         LSL.W    #4,D1             * preserves sign
         SWAP     D1
         CLR.W    D1
         MOVEQ    #0,D2
         BRA.S    EXIT

*-------------------------------|
*
* the exponent is zero -- check for denormal number.

TSTZRO   ROL.W    #4,D1
         ADD.W    D1,D1             * sign bit to x-flag
         OR.L     D2,D1
         BNE.S    YUK

         ROXR.L   #1,D1             * set sign of result
         BRA.S    EXIT

*-------------------------------|
* number is denormalized, unpack to extended, add the integer
* argument to the exponent, and repack.  This may entail further
* denormalization, with a possible rounding error.

YUK      MOVE.W   D0,D5
         EXT      D5
         CMP.L    D0,D5
         BNE.S    ARGERR

         MOVE.L   D1,D0
         MOVE.L   D2,D1
         JSR      P_DTOX(PC)

         ADD.W    D5,D0
         JSR      P_XTOD(PC)

         MOVE.L   D1,D2
         MOVE.L   D0,D1
         BRA.S    EXIT

*-------------------------------|
ARGERR
         JSR      P_FPPERR(PC)
*
         END
