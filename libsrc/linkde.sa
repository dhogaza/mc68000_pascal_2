LINKDE   IDNT     2,2      Link dependent code: initialize, p_getwrk, p_getdia
         TTL      Link dependent code: initialize, p_getwrk, p_getdia
* NOTICE OF COPYRIGHT AND OWNERSHIP OF SOFTWARE:
*
*  Copyright (C) 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988
*                1989, 1990 Oregon Software, Inc.
*  All Rights Reserved.
*
*  This program is the property of Oregon Software.  The program or
*  parts of it may be copied and used only as provided under a signed
*  license agreement with Oregon Software.  Any support purchased from
*  Oregon Software does not apply to user-modified programs.  All copies
*  of this program must display this notice and all copyright notices.
*
*
*  Release version: 0045  Level: 1
*  Processor: MC68000
*  System: VERSADOS
*  Subsystem: STANDARD
*
* Link dependent code: initialize, p_getwrk, p_getdia
*
* Last modified by KRIS on 26-Nov-1990 13:53:27
* Purpose:
         IFEQ     1
Update release version for PL-GS0-GS0 at 2.3.0.1
         ENDC
*
* This module contains the portion of the initialization code
* which must be unique to each link.  It uses external symbols
* which may be set at link time to control the location and size
* of the working storage.  All of the rest of the library can
* reside in a shared segment or fixed ROM.
         PAGE
         INCLUDE  LIBDEF
         IFNE     VERSADOS
         INCLUDE  VDOSDE
         ENDC     versados
         SECTION  8
*
* Pascal-2 runtime initialization.
*
* called:
* lea      cont,a7               Define return address.
* xref     p_initio
* jmp      p_initio
* cont   :        :                     user code.
*
* The length of the global section is determined by the external
* label "global$$" defined by the compiler main program.
*
* The location of the workspace is determined by the external
* label "work$$".  If the "work$$" is not equal to zero it's assumed
* that it determines the starting address of the workspace.  In case
* the "wrok$$" has a zero value, the versados's memory manager
* should find appropriate segment in memory and return its address
* in register a0.  Note : the logical address set by the versados
* is equal to its phisical location
*
* The length of the workspace is the sum of the library
* workspace, the global space, and the external label "workl$$".
*
         IFNE     VERSADOS
         XREF     WORKL$$           Workspace length
         ENDC     versados
         IFNE     STNDALON
         XREF     WORKE$$           Workspace end address
         ENDC     stndalon
         XREF     WORK$$            Workspace address
         XREF     GLOBAL$$          global space length
*
         XDEF     P_INITIO
P_INITIO EQU      *
         IFNE     VERSADOS
         SWAP     D6                combine two word values
         MOVE.W   D3,D6             to free up a register
         MOVE.L   D0,D3             to hold d0
         MOVE.L   A0,A3             free up a0, a1 for return
         MOVE.L   A1,A4
         MOVE.L   FIXSEG+SG.LEN(PC),A6       requested workspace length
         MOVE.L   A6,A1             size of the segment
         MOVEA.L  #WORK$$,A0        start of workspace
         CMPA.L   #0,A0
         BEQ.S    NONMMU            it's zero, versados should define it
         ERQ      GTSEG$,FIXSEG(PC) allocate new segment
         MOVEA.L  #WORK$$,A0        start of workspace again
         BRA.S    SEGRDY
NONMMU
         ERQ      GTSEG$,FLTSEG(PC) let versados allocate new segment
SEGRDY
         ENDC     versados
         IFNE     STNDALON
         MOVE.L   #WORKE$$,A6       end of workspace
         MOVE.L   WORK$$,A0         start of workspace
         ENDC     stndalon
         MOVE.L   #GLOBAL$$,A5      global variable length
         XREF     P_INIT            routine which does most of the work
         JMP      P_INIT(PC)
         IFNE     VERSADOS
*
* segment allocation packet - "fixed" segment version
*
FIXSEG   DC.L     0                 current task
         DC.L     0                 session number (ignored)
         DC.W     $0200             take what memory we can get
         DC.W     0                 seg attributes
         DC.L     'PAW$'            Pascal work segment.
         DC.L     WORK$$            starting address of segment.
         DC.L     H.SIZE+WORKL$$+GLOBAL$$    segment length
*
* segment allocation packet - "floating" segment version
*
FLTSEG   DC.L     0                 current task
         DC.L     0                 session number (ignored)
         DC.W     $2000             rsm68k defines logical=phisical address
*                                   use a0 for returned info (rcvsa$)
         DC.W     0                 seg attributes
         DC.L     'PAW$'            Pascal work segment.
         DC.L     0
         DC.L     H.SIZE+WORKL$$+GLOBAL$$    segment length
         DC.L     0
         ENDC     versados
         TTL      Get Workspace Pointer
         PAGE
* Get a pointer to the workspace no matter what the current state
* of the registers.  The result is returned on the top of the stack
*
* called:
* jsr      p_getwrk
*
         XDEF     P_GETWRK
P_GETWRK EQU      *
         MOVE.L   (SP),-(SP)        move return address
         IFNE     VERSADOS
         MOVEM.L  D0/A0,-(SP)       d0/a0 are changed bu 'rcvsa'
         MOVE.L   #WORK$$,12(SP)    return address of workspace
         TST.L    12(SP)            zero ?
         BNE.S    HAVEWRK           its known, so we are done
         ERQ      RCVSA$,FLTSEG(PC) receive segment attributes
         MOVE.L   A0,12(SP)         return address of workspace
HAVEWRK
         MOVEM.L  (SP)+,D0/A0
         ENDC     versados
         IFNE     STNDALON
         MOVE.L   WORK$$,4(SP)      return address of workspace
         ENDC     stndalon
         RTS
         TTL      Get Diagnostic Pointer
         PAGE
* Get a reference to the end of the diagnostic data
*
* All diagnostic data generated by the compiler is placed in
* section 14, with no name attached.  This will be concatenated
* by the linker.  The named section 'p_diag' in section 14 is
* used to locate the end of the diagnostic data.  A reference to this
* named section is placed in every object module containing error data,
* so it will be sure to be the first named section in section 14.
*
P_DIAG   SECTION  14
DIAGS    EQU      *
         DC.W     0
         XDEF     P_GETDIA

         SECTION  8
P_GETDIA EQU      *
         MOVE.L   (SP),-(SP)        move return address
         MOVE.L   A0,-(SP)          cannot destroy a0
         LEA      P_GETDIA(PC),A0   use p_getdia as the base address
         ADD.L    #DIAGS-P_GETDIA,A0         calculate the run-time address
         MOVE.L   A0,8(SP)          return address of diagnostics
         MOVE.L   (SP)+,A0
         RTS
         END
