DMUL     IDNT     2,2      Double floating point multiplication routine
         TTL      Double floating point multiplication routine
* NOTICE OF COPYRIGHT AND OWNERSHIP OF SOFTWARE:
*
*  Copyright (C) 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988
*                1989, 1990 Oregon Software, Inc.
*  All Rights Reserved.
*
*  This program is the property of Oregon Software.  The program or
*  parts of it may be copied and used only as provided under a signed
*  license agreement with Oregon Software.  Any support purchased from
*  Oregon Software does not apply to user-modified programs.  All copies
*  of this program must display this notice and all copyright notices.
*
*
*  Release version: 0045  Level: 1
*  Processor: MC68000
*  System: VERSADOS
*  Subsystem: STANDARD
*
* Double floating point multiplication routine
*
* Last modified by KRIS on 26-Nov-1990 14:01:39
* Purpose:
         IFEQ     1
Update release version for PL-GS0-GS0 at 2.3.0.1
         ENDC

         XDEF     P_DMUL
         XREF     P_DTOX
         XREF     P_XTOD
         XREF     P_OVRFLO

         SECTION  8
P_DMUL
STATIC
         LINK     A6,#-8
SAVE
         MOVEM.L  D0-D7/A0,-(SP)
FETCH
         MOVEM.L  8(A6),D0-D1/D4
         MOVE.L   20(A6),D5
UNPACK_B
         JSR      P_DTOX(PC)
         BLE      B_SPECIAL
TRADE
         EXG      D0,D4
         EXG      D1,D5
         EXG      D2,D6
UNPACK_A
         JSR      P_DTOX(PC)
         BLE      A_SPECIAL
READY
         EOR.L    D4,D0
         EOR.W    D4,D0
         ADD.W    D4,D0
         SUB.W    #$3FFF,D0
         MOVEM.L  D1-D2,-8(A6)
         MOVEQ    #0,D1
         SUB.L    D2,D2
         MOVEQ    #6,D7
         MOVE.L   A6,A0
         MOVE.W   -(A0),D2
         ROXL.W   #5,D2
         BRA.S    START
LOOP
         TST.B    D2
         BEQ.S    L6$
         BSET     #8,D2
L6$
         MOVE.B   -(A0),D2
         ROXR.L   #1,D1
         ROXR.L   #1,D2
         BCC.S    L7$
         ADD.L    D6,D2
         ADDX.L   D5,D1
L7$
         ROXR.L   #1,D1
         ROXR.L   #1,D2
         BCC.S    L8$
         ADD.L    D6,D2
         ADDX.L   D5,D1
L8$
         ROXR.L   #1,D1
         ROXR.L   #1,D2
         BCC.S    L9$
         ADD.L    D6,D2
         ADDX.L   D5,D1
L9$
         ROXR.L   #1,D1
         ROXR.L   #1,D2
START
         BCC.S    L1$
         ADD.L    D6,D2
         ADDX.L   D5,D1
L1$
         ROXR.L   #1,D1
         ROXR.L   #1,D2
         BCC.S    L2$
         ADD.L    D6,D2
         ADDX.L   D5,D1
L2$
         ROXR.L   #1,D1
         ROXR.L   #1,D2
         BCC.S    L3$
         ADD.L    D6,D2
         ADDX.L   D5,D1
L3$
         ROXR.L   #1,D1
         ROXR.L   #1,D2
         BCC.S    L4$
         ADD.L    D6,D2
         ADDX.L   D5,D1
L4$
         ROXR.L   #1,D1
         ROXR.L   #1,D2
         BCC.S    L5$
         ADD.L    D6,D2
         ADDX.L   D5,D1
L5$
         DBRA     D7,LOOP
         BCC.S    PACK

         ROXR.L   #1,D1
         ROXR.L   #1,D2
         ADDQ.W   #1,D0
         BCC.S    PACK
         SUBX.B   D1,D1
PACK
         JSR      P_XTOD(PC)
         BVS.S    OVERFLOW
THROW
         MOVEM.L  D0-D1,16(A6)
RESTORE
         MOVEM.L  (SP)+,D0-D7/A0
RELEASE
         UNLK     A6
RETURN
         MOVE.L   (SP),8(SP)
         ADDQ.W   #8,SP
         RTS

OVERFLOW
         JSR      P_OVRFLO(PC)

B_SPECIAL
A_SPECIAL
         MOVEQ    #0,D0
         MOVEQ    #0,D1
         BRA.S    THROW
*
         END
