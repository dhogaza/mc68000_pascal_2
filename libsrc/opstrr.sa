OPSTRR   IDNT     2,2      Read an extended string routines
         TTL      Read an extended string routines
* NOTICE OF COPYRIGHT AND OWNERSHIP OF SOFTWARE:
*
*  Copyright (C) 1982, 1983, 1984, 1985, 1986, 1987, 1988,
*                1989, 1990 Oregon Software, Inc.
*  All Rights Reserved.
*
*  This program is the property of Oregon Software.  The program or
*  parts of it may be copied and used only as provided under a signed
*  license agreement with Oregon Software.  Any support purchased from
*  Oregon Software does not apply to user-modified programs.  All copies
*  of this program must display this notice and all copyright notices.
*
*
*  Release version: 0045  Level: 1
*  Processor: MC68000
*  System: VERSADOS
*  Subsystem: STANDARD
*
* Read an extended string routines
*
* Last modified by KRIS on 26-Nov-1990 13:54:58
* Purpose:
         IFEQ     1
Update release version for PL-GS0-GS0 at 2.3.0.1
         ENDC
*
* Pascal read an extended string routine
*
         INCLUDE  LIBDEF
         INCLUDE  LIBMAC
         PAGE
*
* p_rdxs -- read(file,string)
*
         PROC     P_RDXS,<F,ADDRESS,STR_ADDR,ADDRESS,STR_LEN,INTEGER>

         BEGIN    P_RDXS,A0-A4/D0-D1
         CHECKIO  F,INPUT
         MOVE.L   STR_ADDR(A6),A1   point to target string
         MOVE.L   A1,A2             copy pointer
         ADDQ.L   #1,A1             string really starts here
         MOVE.L   STR_LEN(A6),D0    get length of target string
         ADD.L    D0,A2             calculate pointer past end of string
* check if we are in eoln, if yes (user fergot readln), correct his error and
* load next line
         BTST     #S.DEF,F.STATUS(A4)        is the buffer defined
         BEQ.S    RDS1              no!
         MOVE.L   F.POINT(A4),A0    get address of buffer pointer
         MOVE.B   (A0),D0           get byte from buffer
         BRA.S    RDS2              don't need to call p_getch
RDS1:    JSB      P_GETCH           no, so define f^
RDS2:    BTST     #S.EOF,F.STATUS(A4)        are we at end-of-file?
         BEQ.S    RDSOK             nope
         ERROR    E.EOF
RDSOK:   BTST     #S.EOLN,F.STATUS(A4)       end of line?
         BEQ.S    RDS4              no! go for the string...
RDS3:    JSB      P_GETCH           no, so define f^
         BTST     #S.EOLN,F.STATUS(A4)       end of line?
         BNE.S    RDS5              yes, so end of data
RDS4:    MOVE.B   D0,(A1)+          store current char in string
         CMP.L    A1,A2             compare with end of string
         BHI.S    RDS3              not full, keep reading
         BCLR     #S.DEF,F.STATUS(A4)        buffer no more valid
*
* set the number of valid characters in the string
*
RDS5:    MOVE.L   A1,D0             end of read string
         MOVE.L   STR_ADDR(A6),A1   point to target string
         SUB.L    A1,D0             number of characters we have
         SUBQ.L   #1,D0             the last character is not used
         MOVE.B   D0,(A1)           set the first byte
         ENDPR    P_RDXS            all done
*
* p_rdxs_i -- read(input,string)
*
         PROC     P_RDXS_I,<ST_A_I,ADDRESS,ST_L_I,INTEGER>
         BEGIN    P_RDXS_I
         PEA      G.INPUT(A5)       push pointer to standard input
         MOVE.L   ST_A_I(A6),-(SP)  copy string pointer
         MOVE.L   ST_L_I(A6),-(SP)  copy length
         BSR      P_RDXS            read(file,'string');
         ADD.W    #12,SP            kill temporary parameters
         ENDPR    P_RDXS_I          all done
         END
