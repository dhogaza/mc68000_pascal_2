DDIV     IDNT     2,2      Double floating point division routine
         TTL      Double floating point division routine
* NOTICE OF COPYRIGHT AND OWNERSHIP OF SOFTWARE:
*
*  Copyright (C) 1985, 1986, 1987, 1988, 1989, 1990 Oregon Software, Inc.
*  All Rights Reserved.
*
*  This program is the property of Oregon Software.  The program or
*  parts of it may be copied and used only as provided under a signed
*  license agreement with Oregon Software.  Any support purchased from
*  Oregon Software does not apply to user-modified programs.  All copies
*  of this program must display this notice and all copyright notices.
*
*
*  Release version: 0045  Level: 1
*  Processor: MC68000
*  System: VERSADOS
*  Subsystem: STANDARD
*
* Double floating point division routine
*
* Last modified by KRIS on 26-Nov-1990 14:01:44
* Purpose:
         IFEQ     1
Update release version for PL-GS0-GS0 at 2.3.0.1
         ENDC
         XDEF     P_DDIV
         XREF     P_DTOX
         XREF     P_XTOD
         XREF     P_OVRFLO
         XREF     P_DIVZER
         XREF     P_FPPERR
*
         SECTION  8
P_DDIV
STATIC
         LINK     A6,#-12
SAVE
         MOVEM.L  D0-D7/A0,-(SP)
         LEA      P_DTOX(PC),A0
FETCH
         MOVEM.L  8(A6),D0-D1/D4
         MOVE.L   20(A6),D5
UNPACK_B
         JSR      (A0)              * p_dtox
TRADE
         EXG      D0,D4
         EXG      D1,D5
         EXG      D2,D6
         BLE      B_SPECIAL
UNPACK_A
         JSR      (A0)              * p_dtox
         BLE      A_SPECIAL
SIGN
         LEA      -12(A6),A0
         EOR.L    D4,D0
         EOR.W    D4,D0
         SUB.W    D4,D0
         ADD.W    #$3FFF,D0
         MOVE.L   D0,(A0)+

         LSR.L    #1,D1
         ROXR.L   #1,D2
         LSR.L    #1,D5
         ROXR.L   #1,D6

         MOVE.L   D6,D4
         MOVE.L   D5,D3
         NEG.L    D4
         NEGX.L   D3
         MOVEQ    #6,D7
OUTER_1
         MOVEQ    #7,D0
INNER_1
         ADD.L    D4,D2
         ADDX.L   D3,D1
         BMI.S    SHIFT_2
SHIFT_1
         ADDX.L   D2,D2
         ADDX.L   D1,D1
         DBRA     D0,INNER_1

         MOVE.B   D2,(A0)+
         CLR.B    D2
         DBRA     D7,OUTER_1

         BRA.S    STICKY
OUTER_2
         MOVEQ    #7,D0
INNER_2
         ADD.L    D6,D2
         ADDX.L   D5,D1
         BPL.S    SHIFT_1
SHIFT_2
         ADDX.L   D2,D2
         ADDX.L   D1,D1
         DBRA     D0,INNER_2

         MOVE.B   D2,(A0)+
         CLR.B    D2
         DBRA     D7,OUTER_2
STICKY
         NEG.L    D2
         NEGX.L   D1
         SNE      (A0)+
RETRIEVE
         MOVE.L   -(A0),D2
         MOVE.L   -(A0),D1
         MOVE.L   -(A0),D0
PACK
         JSR      P_XTOD(PC)
         BVS.S    OVERFLOW
THROW
         MOVEM.L  D0-D1,16(A6)
RESTORE
         MOVEM.L  (SP)+,D0-D7/A0
RELEASE
         UNLK     A6
RETURN
         MOVE.L   (SP),8(SP)
         ADDQ.W   #8,SP
         RTS

OVERFLOW
         JSR      P_OVRFLO(PC)


B_SPECIAL
         BNE.S    B_NON_ZERO
B_ZERO
*  test dbz flag before trap, return Inf if masked
         JSR      P_DIVZER(PC)
B_NON_ZERO
*  test inv flag before trap, return NaN if masked
         JSR      P_FPPERR(PC)


A_SPECIAL
         BNE.S    A_NON_ZERO
A_ZERO
         EOR.L    D4,D0
         CLR.W    D0
         BRA.S    PACK
A_NON_ZERO
*  test inv flag before trap, return NaN if masked
         JSR      P_FPPERR(PC)
         END
