FPC      IDNT     2,2      MC68881 specific initialization
         TTL      MC68881 specific initialization
* NOTICE OF COPYRIGHT AND OWNERSHIP OF SOFTWARE:
*
*  Copyright (C) 1987, 1988, 1989, 1990 Oregon Software, Inc.
*  All Rights Reserved.
*
*  This program is the property of Oregon Software.  The program or
*  parts of it may be copied and used only as provided under a signed
*  license agreement with Oregon Software.  Any support purchased from
*  Oregon Software does not apply to user-modified programs.  All copies
*  of this program must display this notice and all copyright notices.
*
*
*  Release version: 0045  Level: 1
*  Processor: MC68020/MC68881
*  System: VERSADOS
*  Subsystem: STANDARD
*
* MC68881 specific initialization
*
* Last modified by KRIS on 26-Nov-1990 14:03:18
* Purpose:
         IFEQ     1
Update release version for PL-GS0-GS0 at 2.3.0.1
         ENDC
*
* MC68881 specific initialization
*
         INCLUDE  LIBDEF
         INCLUDE  VDOSDE
         INCLUDE  PASMAC
         INCLUDE  TRAPDEF
         XREF     P_FPCTRL
         XDEF     P_FPC
         XDEF     P_68881
         XREF     P_TRAPLC
         SECTION  8
P_68881  EQU      1

         PROC     P_FPC

         BEGIN    P_FPC
         ERQ      CRXTCB$,XTCB(PC)  create xtcb in order to use mc68881
         IFEQ     PIC
         XREF     P_FPCTRL
         ERQ      RESVCT$,P_RESVCT  establish reserved exception vectors
         FMOVE.L  #P_FPCTRL,CONTROL enable all possible fpc's exceptions
         ENDC     nopic
         IFNE     PIC
         XREF     P_OWN
*
* Trap and execption vector tables contain addresses at the link time.
* Following code is responsible to change all used vectors (those
* not set to 0) to their values at run-time.
* Since the offset of vector tables from the current code may be larger
* then 32K bytes, the explicit pc-relative mode is not used to access
* those addresses.
*
         MOVE.L   #RESVCT,D0        "link time" address
         LEA      RESVCT(PC),A0     run time address
         NEG.L    D0
         ADD.L    A0,D0             value used to patch vectors
         MOVE.L   G.OWN(A5),A1      pointer to read/write segment
         ADD.L    #P_RESVCT-P_OWN,A1         run-time address of start of tables
         LEA      ENDVCT(PC),A2     end of tables
SETTRAP
         CMP.L    A0,A2             are we done ?
         BEQ.S    TRAPRDY           yes, let's exit
         MOVE.L   (A0)+,D1          vector value
         BEQ.S    NOTUSED           don't patch it if zero
         ADD.L    D0,D1             change the value to run time one
NOTUSED
         MOVE.L   D1,(A1)+          change to vector value
         BRA.S    SETTRAP           loop...
TRAPRDY
         MOVE.L   G.OWN(A5),A0      pointer to read/write segment
         ADD.L    #P_RESVCT-P_OWN,A0         address of reserved exception vectors
         ERQ      RESVCT$           establish reserved exception vectors
         FMOVE.L  #P_FPCTRL,CONTROL enable all possible fpc's exceptions
         ENDC     pic
         ENDPR    P_FPC
*
* Parameter block for the directive XTCB (create extended task control block)
*
XTCB
         DC.L     0                 task_id
         DC.L     0
         DC.W     0                 options - rms68k knows the co-processor
         DC.W     1                 coprocessor id
         DC.W     0                 not applicable
         DC.W     0                 not applicable
         DC.L     0                 not applicable
         DC.L     0                 not applicable


* trap and exception vectors.
*
* The values of these constants are specified in the macro "trapdef"
*
         TRAPDEF  1
*
* Extended exception vectors
*
         IFNE     PIC
RESVCT
         ENDC     pic
         IFEQ     PIC
         XDEF     P_RESVCT
P_RESVCT
         ENDC     nopic
         DC.L     0                 vector #12
         DC.L     0                 undefined
         DC.L     0                 undefined
         DC.L     0                 undefined
         DC.L     0                 vector #16
         DC.L     0                 vector #17
         DC.L     0                 vector #18
         DC.L     0                 vector #18
         DC.L     0                 vector #19
         DC.L     0                 vector #20
         DC.L     0                 vector #21
         DC.L     0                 vector #22
         DC.L     0                 undefined
         DC.L     0                 undefined
         DC.L     0                 undefined
         DC.L     0                 undefined
         DC.L     P_TRAPLC+EF_UCOND branch/set on unordered condition (#48)
         DC.L     P_TRAPLC+EF_INEX  inexact result (#49)
         DC.L     P_TRAPLC+EF_DIVZ  floating-point divide by zero(#50)
         DC.L     P_TRAPLC+EF_UNDER underflow (#51)
         DC.L     P_TRAPLC+EF_OPERR operand error (#52)
         DC.L     P_TRAPLC+EF_OVERF overflow (#53)
         DC.L     P_TRAPLC+EF_NAN   signaling "nan" (#54)
         DC.L     0                 vector #55
         DC.L     0                 vector #56
         DC.L     0                 vector #57
         DC.L     0                 vector #58
         DC.L     0                 vector #59
         DC.L     0                 vector #60
         DC.L     0                 vector #61
         DC.L     0                 vector #62
         DC.L     0                 vector #63
ENDVCT
         IFNE     PIC
P_RESVCT SECTION  15

P_RESVCT DS.B     ENDVCT-RESVCT
         ENDC     pic
         END
