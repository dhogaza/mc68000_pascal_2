DFLOAT   IDNT     2,2      Double floating point conversion
         TTL      Double floating point conversion
* NOTICE OF COPYRIGHT AND OWNERSHIP OF SOFTWARE:
*
*  Copyright (C) 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988
*                1989, 1990 Oregon Software, Inc.
*  All Rights Reserved.
*
*  This program is the property of Oregon Software.  The program or
*  parts of it may be copied and used only as provided under a signed
*  license agreement with Oregon Software.  Any support purchased from
*  Oregon Software does not apply to user-modified programs.  All copies
*  of this program must display this notice and all copyright notices.
*
*
*  Release version: 0045  Level: 1
*  Processor: MC68000
*  System: VERSADOS
*  Subsystem: STANDARD
*
* Double floating point conversion
*
* Last modified by KRIS on 26-Nov-1990 14:00:58
* Purpose:
         IFEQ     1
Update release version for PL-GS0-GS0 at 2.3.0.1
         ENDC
         XDEF     P_DFLOAT
*
         SECTION  8

P_DFLOAT
         SUBQ.W   #8,SP             make room for result
         MOVE.L   8(SP),(SP)        relocate return address

         LINK     A6,#0             new frame pointer
         MOVEM.L  D0-D1/A0,-(SP)    save registers d0/d1 and a0

         MOVE.L   D4,D0             set flags
         BGT.S    POSFLOAT          if positive

         MOVE.W   #2048+1054,D1     minus sign + initial exp
         NEG.L    D0                take absolute value

         BPL.S    CONT              if not -maxint-1

         MOVE.L   #$C1E00000,D0     floating point -maxint-1 (upper)
         CLR.L    D1                floating point -maxint-1 (lower)
         BRA.S    STORE
CONT
         BNE.S    COMPARE           if not 0
ZERO
         MOVEQ    #0,D1
         BRA.S    STORE

POSFLOAT
         MOVE.W   #1054,D1          plus sign + initial exp

COMPARE
         EXT.L    D1                clear extension word
         CMP.L    #32,D0            test for low precision
         BGE.S    GENERAL           if more than 5 significant bits

SHORTCUT
         LSR.W    #1,D0             reduces shift table size by 2
         LEA.L    TABLE(PC),A0
         ADD.L    D0,A0
         MOVE.B   (A0),D1
         ROXR.L   D1,D0             shift 0..4 more places
         SUBQ.W   #1,D1             adjust exponent
         BRA.S    COMPOSE

GENERAL
         CMP.L    #$10000,D0
         BGE.S    LONGINT           if more than 16 bits

SHORTINT
         ADD.W    D0,D0             shift left
         DBCS     D1,SHORTINT       until carry gets set

         SWAP     D0
         SUB.W    #16,D1            adjust exponent
         BRA.S    COMPOSE

LONGINT
         ADD.L    D0,D0             shift left
         DBCS     D1,LONGINT        until carry gets set

         SWAP     D1                save sign and exponent
         MOVE.W   D0,D1
         LSL.W    #4,D1
         SWAP     D1
         AND.W    #$F000,D0

COMPOSE
         ADD.W    D1,D0             combine parts
         CLR.W    D1                clear least significant word
         ROL.L    #4,D0
         SWAP     D0                set sign and exponent (and cc's)

STORE
         MOVEM.L  D0-D1,8(A6)       store result
         MOVEM.L  (SP)+,D0-D1/A0    restore registers
         UNLK     A6
         RTS

TABLE
         DC.B     0,1,2,2,3,3,3,3
         DC.B     4,4,4,4,4,4,4,4

         END
