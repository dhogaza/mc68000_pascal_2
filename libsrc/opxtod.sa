OPXTOD   IDNT     2,2      Extended-round-to-double packer
         TTL      Extended-round-to-double packer
* NOTICE OF COPYRIGHT AND OWNERSHIP OF SOFTWARE:
*
*  Copyright (C) 1986, 1987, 1988, 1989, 1990 Oregon Software, Inc.
*  All Rights Reserved.
*
*  This program is the property of Oregon Software.  The program or
*  parts of it may be copied and used only as provided under a signed
*  license agreement with Oregon Software.  Any support purchased from
*  Oregon Software does not apply to user-modified programs.  All copies
*  of this program must display this notice and all copyright notices.
*
*
*  Release version: 0045  Level: 1
*  Processor: MC68000
*  System: VERSADOS
*  Subsystem: STANDARD
*
* Extended-round-to-double packer
*
* Last modified by KRIS on 26-Nov-1990 14:01:48
* Purpose:
         IFEQ     1
Update release version for PL-GS0-GS0 at 2.3.0.1
         ENDC
*
*        xtod -- extended-round-to-double packer.
*
         XDEF     P_XTOD
         SECTION  8
P_XTOD
UNSTICK
         MOVEQ    #0,D3
TEST
         TST.W    D0
         BEQ      EXP_ZERO
* nonzero_in:
         TST.L    D1
         BNE.S    HI_NONZERO
HI_ZERO
         MOVE.L   D2,D1
         BEQ      DIRTY
         MOVEQ    #0,D2
         SUB.W    #32,D0
         TST.L    D1
HI_NONZERO
         BMI.S    STICK_9
NORMALIZE
         ADD.L    D2,D2
         ADDX.L   D1,D1
         DBMI     D0,NORMALIZE
         SUBQ.W   #1,D0
STICK_9
         MOVEQ    #8,D4
LOOP
         LSR.L    #1,D1
         ROXR.L   #1,D2
         BCC.S    SLIP
STICK
         MOVEQ    #1,D3
SLIP
         DBRA     D4,LOOP
RANGE
         CMP.W    #$43FF,D0
         BGE      OVERFLOW
         SUB.W    #$3C00,D0
         BGT.S    ROUND
* denormal:
         NEG.W    D0
         CMP.W    #53,D0
         BGE      TINY
DENORMALIZE
         LSR.L    #1,D1
         ROXR.L   #1,D2
         BCC.S    SLIPPED
STUCK
         MOVEQ    #1,D3
SLIPPED
         DBRA     D0,DENORMALIZE
         CLR.W    D0
ROUND
READY
         OR.B     D3,D2
*        movb     round_mode, d4
         MOVE.B   #$00,D4           * force "nearest" mode
         CMP.B    #$03,D4
         BEQ.S    TRUNC
         MOVE.B   D2,D3
         AND.B    #$07,D3
         TST.L    D0
         SMI      D5
         AND.B    #$01,D5
         ADD.B    D4,D4
         OR.B     D5,D4
         LSL.B    #3,D4
         OR.B     D4,D3
AIM
         LEA      TABLE(PC),A0
         ADD.L    D3,A0
         MOVE.B   (A0),D3
         LEA      FIRE(PC),A0
         ADD.L    D3,A0
         JMP      (A0)
FIRE
JAM_1
         ADDQ.B   #4,D2
         BRA.S    SPENT
ADD_1
         ADDQ.L   #4,D2
         BCC.S    SPENT
EXTEND
         ADDQ.L   #1,D1
         BTST     #23,D1
         BEQ.S    SPENT
FIXUP
         ASR.L    #1,D1
         ADDQ.W   #1,D0
* rerange_high:
         CMP.W    #$07FF,D0
         BGE.S    OVERFLOW
TRUNC
SPENT
ACCURACY
         MOVEQ    #$03,D3
         AND.B    D2,D3
         BEQ.S    EXACT
INEXACT
         NOP
EXACT
SLIP_2
         LSR.L    #1,D1
         ROXR.L   #1,D2
         LSR.L    #1,D1
         ROXR.L   #1,D2
* rerange_low:
         TST.L    D2
         BNE.S    NONZERO_OUT
LO_ZERO
         TST.L    D1
         BEQ.S    UNDERFLOW
NONZERO_OUT
PACK
         BCLR     #20,D1
         LSL.W    #5,D0
SIGN
         ASR.L    #1,D0
         SWAP     D0
         CLR.W    D0
         OR.L     D1,D0
         MOVE.L   D2,D1
         RTS                        * ?n, -z, -v, -c, ?x
*-------------------------------|
EXP_ZERO
         TST.L    D1
         BNE.S    UNDERFLOW
         TST.L    D2
         BEQ.S    ZERO
UNDERFLOW
         MOVEQ    #0,D1
ZERO
         AND.L    #$80000000,D0
         TST.W    D0
         RTS                        * -n, +z, -v, -c, ?x
*-------------------------------|
OVERFLOW
INFINITY
         MOVEQ    #0,D1
         AND.L    #$80000000,D0
         OR.L     #$7FF08000,D0
         ADD.W    D0,D0
         RTS                        * -n, +z, +v, +c, +x
*-------------------------------|
DIRTY
NAN
         SWAP     D0
         MOVE.W   #$7FF4,D0
         SWAP     D0
         RTS                        * -n, -z, -v, -c, ?x
*-------------------------------|
TINY
         MOVEQ    #0,D2
         MOVEQ    #0,D1
         CLR.W    D0
         MOVEQ    #1,D3
         BRA      ROUND
*-------------------------------|
TABLE
NEAREST_EVEN
L0$
         DC.B     TRUNC-FIRE
         DC.B     TRUNC-FIRE
         DC.B     TRUNC-FIRE
         DC.B     JAM_1-FIRE
         DC.B     TRUNC-FIRE
         DC.B     TRUNC-FIRE
         DC.B     ADD_1-FIRE
         DC.B     ADD_1-FIRE
L1$
         DC.B     TRUNC-FIRE
         DC.B     TRUNC-FIRE
         DC.B     TRUNC-FIRE
         DC.B     JAM_1-FIRE
         DC.B     TRUNC-FIRE
         DC.B     TRUNC-FIRE
         DC.B     ADD_1-FIRE
         DC.B     ADD_1-FIRE
MINUS_INFINITY
L2$
         DC.B     TRUNC-FIRE
         DC.B     TRUNC-FIRE
         DC.B     TRUNC-FIRE
         DC.B     TRUNC-FIRE
         DC.B     TRUNC-FIRE
         DC.B     TRUNC-FIRE
         DC.B     TRUNC-FIRE
         DC.B     TRUNC-FIRE
L3$
         DC.B     TRUNC-FIRE
         DC.B     JAM_1-FIRE
         DC.B     JAM_1-FIRE
         DC.B     JAM_1-FIRE
         DC.B     TRUNC-FIRE
         DC.B     ADD_1-FIRE
         DC.B     ADD_1-FIRE
         DC.B     ADD_1-FIRE
PLUS_INFINITY
L4$
         DC.B     TRUNC-FIRE
         DC.B     JAM_1-FIRE
         DC.B     JAM_1-FIRE
         DC.B     JAM_1-FIRE
         DC.B     TRUNC-FIRE
         DC.B     ADD_1-FIRE
         DC.B     ADD_1-FIRE
         DC.B     ADD_1-FIRE
L5$
         DC.B     TRUNC-FIRE
         DC.B     TRUNC-FIRE
         DC.B     TRUNC-FIRE
         DC.B     TRUNC-FIRE
         DC.B     TRUNC-FIRE
         DC.B     TRUNC-FIRE
         DC.B     TRUNC-FIRE
         DC.B     TRUNC-FIRE
*
         END
